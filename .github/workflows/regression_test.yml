import torch
import pytest
from regression import fit_regression_model, create_linear_regression_model

def get_train_data(dim=1):
    """
    Generate training data.
    """
    X = torch.tensor([
        [1.0], [2.0], [3.0], [4.0], [5.0],
        [6.0], [7.0], [8.0], [9.0], [10.0]
    ])
    y = torch.tensor([
        [2.0], [4.0], [6.0], [8.0], [10.0],
        [12.0], [14.0], [16.0], [18.0], [20.0]
    ])
    if dim == 1:
        return X, y
    elif dim == 2:
        X_2 = torch.cat([X, X**2], dim=1)
        return X_2, y
    else:
        raise ValueError("dim must be 1 or 2")

@pytest.mark.parametrize("dim", [1, 2])
def test_regression_model(dim):
    X, y = get_train_data(dim)
    model, norms = fit_regression_model(X, y, learning_rate=0.01, num_epochs=1000)
    X_mean, X_std, y_mean, y_std = norms

    # Test the prediction at an unseen point
    X_test = torch.tensor([[11.0]]) if dim == 1 else torch.tensor([[11.0, 121.0]])
    X_test_normalized = (X_test - X_mean) / X_std
    y_pred_normalized = model(X_test_normalized)
    y_pred = y_pred_normalized * y_std + y_mean

    # Check if the predicted value is close enough to the expected value
    expected_y = torch.tensor([[22.0]])  # Since the relationship is y = 2x
    assert torch.isclose(y_pred, expected_y, atol=1e-1).all(), f"Prediction not accurate for dimension {dim}"

if __name__ == "__main__":
    pytest.main()
